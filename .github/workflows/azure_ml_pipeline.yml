name: Azure ML Pipeline
 
on:
  push:
    branches:
      - main  # Trigger on push to main branch
 
jobs:
  train-deploy-model:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout the code from GitHub
    - name: Checkout code
      uses: actions/checkout@v3
 
    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
 
    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip         
        pip install -r requirements.txt
 
    # Step 4: Train the model using train.py
    - name: Train the Model
      run: |
        python train.py  # This script will save the model to outputs/model.pkl
 
    # Step 5: Authenticate and connect to Azure ML workspace using the SDK
    - name: Azure ML Authentication
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE_NAME }}
      run: |
        python - <<EOF
        from azureml.core import Workspace
        from azureml.core.authentication import ServicePrincipalAuthentication
        import os
 
        # Set up Service Principal authentication
        sp_auth = ServicePrincipalAuthentication(
            tenant_id=os.getenv("AZURE_TENANT_ID"),
            service_principal_id=os.getenv("AZURE_CLIENT_ID"),
            service_principal_password=os.getenv("AZURE_CLIENT_SECRET")
        )
 
        # Connect to the Azure ML Workspace
        ws = Workspace.get(
            name=os.getenv("AZURE_WORKSPACE_NAME"),
            resource_group=os.getenv("AZURE_RESOURCE_GROUP"),
            subscription_id=os.getenv("AZURE_SUBSCRIPTION_ID"),
            auth=sp_auth
        )
 
        print(f"Connected to Azure ML Workspace: {ws.name}")
        EOF
 
    # Step 6: Register the trained model
    - name: Register Model in Azure ML
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE_NAME }}
      run: |
        python - <<EOF
        from azureml.core import Workspace, Model
        from azureml.core.authentication import ServicePrincipalAuthentication
        import os
 
        # Set up Service Principal authentication
        sp_auth = ServicePrincipalAuthentication(
            tenant_id=os.getenv('AZURE_TENANT_ID'),
            service_principal_id=os.getenv('AZURE_CLIENT_ID'),
            service_principal_password=os.getenv('AZURE_CLIENT_SECRET')
        )
 
        # Connect to the Azure ML Workspace
        ws = Workspace.get(
            name=os.getenv('AZURE_WORKSPACE_NAME'),
            resource_group=os.getenv('AZURE_RESOURCE_GROUP'),
            subscription_id=os.getenv('AZURE_SUBSCRIPTION_ID'),
            auth=sp_auth
        )
 
        # Register the model
        model = Model.register(
            workspace=ws,
            model_path='outputs/model.pkl',  # Path to the trained model
            model_name='iris_model'  # Name of the registered model
        )
 
        print(f"Model {model.name} registered in Azure ML")
        EOF
 
    # Step 7: Deploy the model as a service
    - name: Deploy Model in Azure ML
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE_NAME }}
      run: |
        python - <<EOF
        from azureml.core import Workspace, Model
        from azureml.core.authentication import ServicePrincipalAuthentication
        from azureml.core.webservice import AciWebservice, Webservice
        from azureml.core.model import InferenceConfig
        from azureml.core.environment import Environment
        import os
 
        # Set up Service Principal authentication
        sp_auth = ServicePrincipalAuthentication(
            tenant_id=os.getenv('AZURE_TENANT_ID'),
            service_principal_id=os.getenv('AZURE_CLIENT_ID'),
            service_principal_password=os.getenv('AZURE_CLIENT_SECRET')
        )
 
        # Connect to the Azure ML Workspace
        ws = Workspace.get(
            name=os.getenv('AZURE_WORKSPACE_NAME'),
            resource_group=os.getenv('AZURE_RESOURCE_GROUP'),
            subscription_id=os.getenv('AZURE_SUBSCRIPTION_ID'),
            auth=sp_auth
        )
 
        # Import the model
        model = Model(ws, name='iris_model')  # Adjust to your actual model name
 
        # Define the inference config (using score.py)
        env = Environment.from_conda_specification(name="project_environment", file_path="environment.yml")
        inference_config = InferenceConfig(entry_script="score.py", environment=env)
 
        # Set up the deployment configuration
        deployment_config = AciWebservice.deploy_configuration(cpu_cores=1, memory_gb=1)
 
        # Deploy the model as a service
        service = Model.deploy(ws, "iris-service", [model], inference_config, deployment_config)
        service.wait_for_deployment(show_output=True)
 
        print(f"Service deployed at: {service.scoring_uri}")
        EOF
